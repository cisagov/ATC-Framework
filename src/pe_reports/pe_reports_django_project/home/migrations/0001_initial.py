"""home module migrations/0001.py."""
# Generated by Django 4.1.5 on 2023-04-28 17:50

# Standard Python Libraries
import uuid

# Third-Party Libraries
from django.db import migrations, models


class Migration(migrations.Migration):
    """Migration class."""

    initial = True

    dependencies = []  # type: list[str]

    operations = [
        migrations.CreateModel(
            name="AlembicVersion",
            fields=[
                (
                    "version_num",
                    models.CharField(max_length=32, primary_key=True, serialize=False),
                ),
            ],
            options={
                "db_table": "alembic_version",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Alerts",
            fields=[
                ("alerts_uid", models.UUIDField(primary_key=True, serialize=False)),
                ("alert_name", models.TextField(blank=True, null=True)),
                ("content", models.TextField(blank=True, null=True)),
                ("date", models.DateField(blank=True, null=True)),
                ("sixgill_id", models.TextField(blank=True, null=True, unique=True)),
                ("read", models.TextField(blank=True, null=True)),
                ("severity", models.TextField(blank=True, null=True)),
                ("site", models.TextField(blank=True, null=True)),
                ("threat_level", models.TextField(blank=True, null=True)),
                ("threats", models.TextField(blank=True, null=True)),
                ("title", models.TextField(blank=True, null=True)),
                ("user_id", models.TextField(blank=True, null=True)),
                ("category", models.TextField(blank=True, null=True)),
                ("lang", models.TextField(blank=True, null=True)),
                ("content_snip", models.TextField(blank=True, null=True)),
                ("asset_mentioned", models.TextField(blank=True, null=True)),
                ("asset_type", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "alerts",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Alias",
            fields=[
                ("alias_uid", models.UUIDField(primary_key=True, serialize=False)),
                ("alias", models.TextField(unique=True)),
            ],
            options={
                "db_table": "alias",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AssetHeaders",
            fields=[
                (
                    "field_id",
                    models.UUIDField(
                        db_column="_id", primary_key=True, serialize=False
                    ),
                ),
                ("organizations_uid", models.UUIDField()),
                ("sub_url", models.TextField()),
                ("tech_detected", models.TextField()),
                ("interesting_header", models.TextField()),
                ("ssl2", models.TextField(blank=True, null=True)),
                ("tls1", models.TextField(blank=True, null=True)),
                ("certificate", models.TextField(blank=True, null=True)),
                ("scanned", models.BooleanField(blank=True, null=True)),
                ("ssl_scanned", models.BooleanField(blank=True, null=True)),
            ],
            options={
                "db_table": "asset_headers",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=150, unique=True)),
            ],
            options={
                "db_table": "auth_group",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthGroupPermissions",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                "db_table": "auth_group_permissions",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthPermission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("codename", models.CharField(max_length=100)),
            ],
            options={
                "db_table": "auth_permission",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128)),
                ("last_login", models.DateTimeField(blank=True, null=True)),
                ("is_superuser", models.BooleanField()),
                ("username", models.CharField(max_length=150, unique=True)),
                ("first_name", models.CharField(max_length=150)),
                ("last_name", models.CharField(max_length=150)),
                ("email", models.CharField(max_length=254)),
                ("is_staff", models.BooleanField()),
                ("is_active", models.BooleanField()),
                ("date_joined", models.DateTimeField()),
            ],
            options={
                "db_table": "auth_user",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthUserGroups",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                "db_table": "auth_user_groups",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthUserUserPermissions",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                "db_table": "auth_user_user_permissions",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Cidrs",
            fields=[
                (
                    "cidr_uid",
                    models.UUIDField(
                        default=uuid.UUID("1acc87b0-e5ed-11ed-aaa5-37ca8d677a21"),
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("network", models.TextField()),
                ("insert_alert", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "cidrs",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="CredentialBreaches",
            fields=[
                (
                    "credential_breaches_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("breach_name", models.TextField(unique=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("exposed_cred_count", models.BigIntegerField(blank=True, null=True)),
                ("breach_date", models.DateField(blank=True, null=True)),
                ("added_date", models.DateTimeField(blank=True, null=True)),
                ("modified_date", models.DateTimeField(blank=True, null=True)),
                ("data_classes", models.TextField(blank=True, null=True)),
                ("password_included", models.BooleanField(blank=True, null=True)),
                ("is_verified", models.BooleanField(blank=True, null=True)),
                ("is_fabricated", models.BooleanField(blank=True, null=True)),
                ("is_sensitive", models.BooleanField(blank=True, null=True)),
                ("is_retired", models.BooleanField(blank=True, null=True)),
                ("is_spam_list", models.BooleanField(blank=True, null=True)),
            ],
            options={
                "db_table": "credential_breaches",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="CredentialExposures",
            fields=[
                (
                    "credential_exposures_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("email", models.TextField()),
                ("root_domain", models.TextField(blank=True, null=True)),
                ("sub_domain", models.TextField(blank=True, null=True)),
                ("breach_name", models.TextField(blank=True, null=True)),
                ("modified_date", models.DateTimeField(blank=True, null=True)),
                ("name", models.TextField(blank=True, null=True)),
                ("login_id", models.TextField(blank=True, null=True)),
                ("phone", models.TextField(blank=True, null=True)),
                ("password", models.TextField(blank=True, null=True)),
                ("hash_type", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "credential_exposures",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="CveInfo",
            fields=[
                (
                    "cve_uuid",
                    models.UUIDField(
                        default=uuid.UUID("1acc87b1-e5ed-11ed-aaa5-37ca8d677a21"),
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("cve_name", models.TextField(blank=True, null=True, unique=True)),
                (
                    "cvss_2_0",
                    models.DecimalField(
                        blank=True, decimal_places=1000, max_digits=1000, null=True
                    ),
                ),
                ("cvss_2_0_severity", models.TextField(blank=True, null=True)),
                ("cvss_2_0_vector", models.TextField(blank=True, null=True)),
                (
                    "cvss_3_0",
                    models.DecimalField(
                        blank=True, decimal_places=1000, max_digits=1000, null=True
                    ),
                ),
                ("cvss_3_0_severity", models.TextField(blank=True, null=True)),
                ("cvss_3_0_vector", models.TextField(blank=True, null=True)),
                (
                    "dve_score",
                    models.DecimalField(
                        blank=True, decimal_places=1000, max_digits=1000, null=True
                    ),
                ),
            ],
            options={
                "db_table": "cve_info",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="CyhyContacts",
            fields=[
                (
                    "field_id",
                    models.UUIDField(
                        db_column="_id",
                        default=uuid.UUID("1acc87b2-e5ed-11ed-aaa5-37ca8d677a21"),
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("org_id", models.TextField()),
                ("org_name", models.TextField()),
                ("phone", models.TextField(blank=True, null=True)),
                ("contact_type", models.TextField()),
                ("email", models.TextField(blank=True, null=True)),
                ("name", models.TextField(blank=True, null=True)),
                ("date_pulled", models.DateField(blank=True, null=True)),
            ],
            options={
                "db_table": "cyhy_contacts",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="CyhyDbAssets",
            fields=[
                (
                    "field_id",
                    models.UUIDField(
                        db_column="_id",
                        default=uuid.UUID("1acc87b3-e5ed-11ed-aaa5-37ca8d677a21"),
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("org_id", models.TextField(blank=True, null=True)),
                ("org_name", models.TextField(blank=True, null=True)),
                ("contact", models.TextField(blank=True, null=True)),
                ("network", models.GenericIPAddressField(blank=True, null=True)),
                ("type", models.TextField(blank=True, null=True)),
                ("first_seen", models.DateField(blank=True, null=True)),
                ("last_seen", models.DateField(blank=True, null=True)),
                ("currently_in_cyhy", models.BooleanField(blank=True, null=True)),
            ],
            options={
                "db_table": "cyhy_db_assets",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="CyhyPortScans",
            fields=[
                (
                    "cyhy_port_scans_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("cyhy_id", models.TextField(blank=True, null=True, unique=True)),
                ("cyhy_time", models.DateTimeField(blank=True, null=True)),
                ("service_name", models.TextField(blank=True, null=True)),
                ("port", models.TextField(blank=True, null=True)),
                ("product", models.TextField(blank=True, null=True)),
                ("cpe", models.TextField(blank=True, null=True)),
                ("first_seen", models.DateField(blank=True, null=True)),
                ("last_seen", models.DateField(blank=True, null=True)),
                ("ip", models.TextField(blank=True, null=True)),
                ("state", models.TextField(blank=True, null=True)),
                ("agency_type", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "cyhy_port_scans",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DataapiApiuser",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "apikey",
                    models.CharField(
                        blank=True, db_column="apiKey", max_length=200, null=True
                    ),
                ),
                (
                    "refresh_token",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
            ],
            options={
                "db_table": "dataAPI_apiuser",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DataSource",
            fields=[
                (
                    "data_source_uid",
                    models.UUIDField(
                        default=uuid.UUID("1acc87b4-e5ed-11ed-aaa5-37ca8d677a21"),
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.TextField()),
                ("description", models.TextField()),
                ("last_run", models.DateField()),
            ],
            options={
                "db_table": "data_source",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DjangoAdminLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("action_time", models.DateTimeField()),
                ("object_id", models.TextField(blank=True, null=True)),
                ("object_repr", models.CharField(max_length=200)),
                ("action_flag", models.SmallIntegerField()),
                ("change_message", models.TextField()),
            ],
            options={
                "db_table": "django_admin_log",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DjangoContentType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("app_label", models.CharField(max_length=100)),
                ("model", models.CharField(max_length=100)),
            ],
            options={
                "db_table": "django_content_type",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DjangoMigrations",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("app", models.CharField(max_length=255)),
                ("name", models.CharField(max_length=255)),
                ("applied", models.DateTimeField()),
            ],
            options={
                "db_table": "django_migrations",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DjangoSession",
            fields=[
                (
                    "session_key",
                    models.CharField(max_length=40, primary_key=True, serialize=False),
                ),
                ("session_data", models.TextField()),
                ("expire_date", models.DateTimeField()),
            ],
            options={
                "db_table": "django_session",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DnsRecords",
            fields=[
                (
                    "dns_record_uid",
                    models.UUIDField(
                        default=uuid.UUID("1acc87b5-e5ed-11ed-aaa5-37ca8d677a21"),
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("domain_name", models.TextField(blank=True, null=True)),
                ("domain_type", models.TextField(blank=True, null=True)),
                ("created_date", models.DateTimeField(blank=True, null=True)),
                ("updated_date", models.DateTimeField(blank=True, null=True)),
                ("expiration_date", models.DateTimeField(blank=True, null=True)),
                ("name_servers", models.TextField(blank=True, null=True)),
                ("whois_server", models.TextField(blank=True, null=True)),
                ("registrar_name", models.TextField(blank=True, null=True)),
                ("status", models.TextField(blank=True, null=True)),
                ("clean_text", models.TextField(blank=True, null=True)),
                ("raw_text", models.TextField(blank=True, null=True)),
                ("registrant_name", models.TextField(blank=True, null=True)),
                ("registrant_organization", models.TextField(blank=True, null=True)),
                ("registrant_street", models.TextField(blank=True, null=True)),
                ("registrant_city", models.TextField(blank=True, null=True)),
                ("registrant_state", models.TextField(blank=True, null=True)),
                ("registrant_post_code", models.TextField(blank=True, null=True)),
                ("registrant_country", models.TextField(blank=True, null=True)),
                ("registrant_email", models.TextField(blank=True, null=True)),
                ("registrant_phone", models.TextField(blank=True, null=True)),
                ("registrant_phone_ext", models.TextField(blank=True, null=True)),
                ("registrant_fax", models.TextField(blank=True, null=True)),
                ("registrant_fax_ext", models.TextField(blank=True, null=True)),
                ("registrant_raw_text", models.TextField(blank=True, null=True)),
                ("administrative_name", models.TextField(blank=True, null=True)),
                (
                    "administrative_organization",
                    models.TextField(blank=True, null=True),
                ),
                ("administrative_street", models.TextField(blank=True, null=True)),
                ("administrative_city", models.TextField(blank=True, null=True)),
                ("administrative_state", models.TextField(blank=True, null=True)),
                ("administrative_post_code", models.TextField(blank=True, null=True)),
                ("administrative_country", models.TextField(blank=True, null=True)),
                ("administrative_email", models.TextField(blank=True, null=True)),
                ("administrative_phone", models.TextField(blank=True, null=True)),
                ("administrative_phone_ext", models.TextField(blank=True, null=True)),
                ("administrative_fax", models.TextField(blank=True, null=True)),
                ("administrative_fax_ext", models.TextField(blank=True, null=True)),
                ("administrative_raw_text", models.TextField(blank=True, null=True)),
                ("technical_name", models.TextField(blank=True, null=True)),
                ("technical_organization", models.TextField(blank=True, null=True)),
                ("technical_street", models.TextField(blank=True, null=True)),
                ("technical_city", models.TextField(blank=True, null=True)),
                ("technical_state", models.TextField(blank=True, null=True)),
                ("technical_post_code", models.TextField(blank=True, null=True)),
                ("technical_country", models.TextField(blank=True, null=True)),
                ("technical_email", models.TextField(blank=True, null=True)),
                ("technical_phone", models.TextField(blank=True, null=True)),
                ("technical_phone_ext", models.TextField(blank=True, null=True)),
                ("technical_fax", models.TextField(blank=True, null=True)),
                ("technical_fax_ext", models.TextField(blank=True, null=True)),
                ("technical_raw_text", models.TextField(blank=True, null=True)),
                ("billing_name", models.TextField(blank=True, null=True)),
                ("billing_organization", models.TextField(blank=True, null=True)),
                ("billing_street", models.TextField(blank=True, null=True)),
                ("billing_city", models.TextField(blank=True, null=True)),
                ("billing_state", models.TextField(blank=True, null=True)),
                ("billing_post_code", models.TextField(blank=True, null=True)),
                ("billing_country", models.TextField(blank=True, null=True)),
                ("billing_email", models.TextField(blank=True, null=True)),
                ("billing_phone", models.TextField(blank=True, null=True)),
                ("billing_phone_ext", models.TextField(blank=True, null=True)),
                ("billing_fax", models.TextField(blank=True, null=True)),
                ("billing_fax_ext", models.TextField(blank=True, null=True)),
                ("billing_raw_text", models.TextField(blank=True, null=True)),
                ("zone_name", models.TextField(blank=True, null=True)),
                ("zone_organization", models.TextField(blank=True, null=True)),
                ("zone_street", models.TextField(blank=True, null=True)),
                ("zone_city", models.TextField(blank=True, null=True)),
                ("zone_state", models.TextField(blank=True, null=True)),
                ("zone_post_code", models.TextField(blank=True, null=True)),
                ("zone_country", models.TextField(blank=True, null=True)),
                ("zone_email", models.TextField(blank=True, null=True)),
                ("zone_phone", models.TextField(blank=True, null=True)),
                ("zone_phone_ext", models.TextField(blank=True, null=True)),
                ("zone_fax", models.TextField(blank=True, null=True)),
                ("zone_fax_ext", models.TextField(blank=True, null=True)),
                ("zone_raw_text", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "dns_records",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DomainAlerts",
            fields=[
                (
                    "domain_alert_uid",
                    models.UUIDField(
                        default=uuid.UUID("1acc87b6-e5ed-11ed-aaa5-37ca8d677a21"),
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("organizations_uid", models.UUIDField()),
                ("alert_type", models.TextField(blank=True, null=True)),
                ("message", models.TextField(blank=True, null=True)),
                ("previous_value", models.TextField(blank=True, null=True)),
                ("new_value", models.TextField(blank=True, null=True)),
                ("date", models.DateField(blank=True, null=True)),
            ],
            options={
                "db_table": "domain_alerts",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DomainPermutations",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "suspected_domain_uid",
                    models.UUIDField(
                        default=uuid.UUID("1acc87b7-e5ed-11ed-aaa5-37ca8d677a21")
                    ),
                ),
                ("domain_permutation", models.TextField(blank=True, null=True)),
                ("ipv4", models.TextField(blank=True, null=True)),
                ("ipv6", models.TextField(blank=True, null=True)),
                ("mail_server", models.TextField(blank=True, null=True)),
                ("name_server", models.TextField(blank=True, null=True)),
                ("fuzzer", models.TextField(blank=True, null=True)),
                ("date_observed", models.DateField(blank=True, null=True)),
                ("ssdeep_score", models.TextField(blank=True, null=True)),
                ("malicious", models.BooleanField(blank=True, null=True)),
                ("blocklist_attack_count", models.IntegerField(blank=True, null=True)),
                ("blocklist_report_count", models.IntegerField(blank=True, null=True)),
                ("dshield_record_count", models.IntegerField(blank=True, null=True)),
                ("dshield_attack_count", models.IntegerField(blank=True, null=True)),
                ("date_active", models.DateField(blank=True, null=True)),
            ],
            options={
                "db_table": "domain_permutations",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DotgovDomains",
            fields=[
                (
                    "dotgov_uid",
                    models.UUIDField(
                        default=uuid.UUID("1acc87b8-e5ed-11ed-aaa5-37ca8d677a21"),
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("domain_name", models.TextField(unique=True)),
                ("domain_type", models.TextField(blank=True, null=True)),
                ("agency", models.TextField(blank=True, null=True)),
                ("organization", models.TextField(blank=True, null=True)),
                ("city", models.TextField(blank=True, null=True)),
                ("state", models.TextField(blank=True, null=True)),
                ("security_contact_email", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "dotgov_domains",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Executives",
            fields=[
                ("executives_uid", models.UUIDField(primary_key=True, serialize=False)),
                ("executives", models.TextField()),
            ],
            options={
                "db_table": "executives",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Ips",
            fields=[
                ("ip_hash", models.TextField(primary_key=True, serialize=False)),
                ("ip", models.GenericIPAddressField(unique=True)),
                ("shodan_results", models.BooleanField(blank=True, null=True)),
                ("live", models.BooleanField(blank=True, null=True)),
                ("date_last_live", models.DateTimeField(blank=True, null=True)),
                ("last_reverse_lookup", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "ips",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="IpsSubs",
            fields=[
                ("ips_subs_uid", models.UUIDField(primary_key=True, serialize=False)),
            ],
            options={
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Mentions",
            fields=[
                ("mentions_uid", models.UUIDField(primary_key=True, serialize=False)),
                ("category", models.TextField(blank=True, null=True)),
                ("collection_date", models.TextField(blank=True, null=True)),
                ("content", models.TextField(blank=True, null=True)),
                ("creator", models.TextField(blank=True, null=True)),
                ("date", models.DateField(blank=True, null=True)),
                (
                    "sixgill_mention_id",
                    models.TextField(blank=True, null=True, unique=True),
                ),
                ("post_id", models.TextField(blank=True, null=True)),
                ("lang", models.TextField(blank=True, null=True)),
                ("rep_grade", models.TextField(blank=True, null=True)),
                ("site", models.TextField(blank=True, null=True)),
                ("site_grade", models.TextField(blank=True, null=True)),
                ("title", models.TextField(blank=True, null=True)),
                ("type", models.TextField(blank=True, null=True)),
                ("url", models.TextField(blank=True, null=True)),
                ("comments_count", models.TextField(blank=True, null=True)),
                ("sub_category", models.TextField(blank=True, null=True)),
                ("tags", models.TextField(blank=True, null=True)),
                ("organizations_uid", models.UUIDField()),
                ("title_translated", models.TextField(blank=True, null=True)),
                ("content_translated", models.TextField(blank=True, null=True)),
                ("detected_lang", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "mentions",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Organizations",
            fields=[
                (
                    "organizations_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("name", models.TextField()),
                ("cyhy_db_name", models.TextField(blank=True, null=True, unique=True)),
                ("report_on", models.BooleanField(blank=True, null=True)),
                ("password", models.TextField(blank=True, null=True)),
                ("date_first_reported", models.DateTimeField(blank=True, null=True)),
                ("premium_report", models.BooleanField(blank=True, null=True)),
                ("agency_type", models.TextField(blank=True, null=True)),
                ("demo", models.BooleanField(blank=True, null=True)),
            ],
            options={
                "db_table": "organizations",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="OrgIdMap",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("cyhy_id", models.TextField(blank=True, null=True)),
                ("pe_org_id", models.TextField(blank=True, null=True)),
                ("merge_orgs", models.BooleanField(blank=True, null=True)),
            ],
            options={
                "db_table": "org_id_map",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="OrgType",
            fields=[
                (
                    "org_type_uid",
                    models.UUIDField(
                        default=uuid.UUID("1acc87b9-e5ed-11ed-aaa5-37ca8d677a21"),
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("org_type", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "org_type",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="PshttResults",
            fields=[
                (
                    "pshtt_results_uid",
                    models.UUIDField(
                        default=uuid.UUID("1acc87ba-e5ed-11ed-aaa5-37ca8d677a21"),
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("data_source_uid", models.UUIDField()),
                ("sub_domain", models.TextField()),
                ("scanned", models.BooleanField(blank=True, null=True)),
                ("base_domain", models.TextField(blank=True, null=True)),
                (
                    "base_domain_hsts_preloaded",
                    models.BooleanField(blank=True, null=True),
                ),
                ("canonical_url", models.TextField(blank=True, null=True)),
                ("defaults_to_https", models.BooleanField(blank=True, null=True)),
                ("domain", models.TextField(blank=True, null=True)),
                ("domain_enforces_https", models.BooleanField(blank=True, null=True)),
                ("domain_supports_https", models.BooleanField(blank=True, null=True)),
                ("domain_uses_strong_hsts", models.BooleanField(blank=True, null=True)),
                ("downgrades_https", models.BooleanField(blank=True, null=True)),
                ("htss", models.BooleanField(blank=True, null=True)),
                ("hsts_entire_domain", models.BooleanField(blank=True, null=True)),
                ("hsts_header", models.TextField(blank=True, null=True)),
                (
                    "hsts_max_age",
                    models.DecimalField(
                        blank=True, decimal_places=1000, max_digits=1000, null=True
                    ),
                ),
                ("hsts_preload_pending", models.BooleanField(blank=True, null=True)),
                ("hsts_preload_ready", models.BooleanField(blank=True, null=True)),
                ("hsts_preloaded", models.BooleanField(blank=True, null=True)),
                ("https_bad_chain", models.BooleanField(blank=True, null=True)),
                ("https_bad_hostname", models.BooleanField(blank=True, null=True)),
                ("https_cert_chain_length", models.IntegerField(blank=True, null=True)),
                (
                    "https_client_auth_required",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "https_custom_truststore_trusted",
                    models.BooleanField(blank=True, null=True),
                ),
                ("https_expired_cert", models.BooleanField(blank=True, null=True)),
                ("https_full_connection", models.BooleanField(blank=True, null=True)),
                ("https_live", models.BooleanField(blank=True, null=True)),
                (
                    "https_probably_missing_intermediate_cert",
                    models.BooleanField(blank=True, null=True),
                ),
                ("https_publicly_trusted", models.BooleanField(blank=True, null=True)),
                ("https_self_signed_cert", models.BooleanField(blank=True, null=True)),
                ("ip", models.GenericIPAddressField(blank=True, null=True)),
                ("live", models.BooleanField(blank=True, null=True)),
                ("notes", models.TextField(blank=True, null=True)),
                ("redirect", models.BooleanField(blank=True, null=True)),
                ("redirect_to", models.TextField(blank=True, null=True)),
                ("server_header", models.TextField(blank=True, null=True)),
                ("server_version", models.TextField(blank=True, null=True)),
                ("strictly_forces_https", models.BooleanField(blank=True, null=True)),
                ("unknown_error", models.BooleanField(blank=True, null=True)),
                ("valid_https", models.BooleanField(blank=True, null=True)),
                ("ep_http_headers", models.TextField(blank=True, null=True)),
                ("ep_http_ip", models.GenericIPAddressField(blank=True, null=True)),
                ("ep_http_live", models.BooleanField(blank=True, null=True)),
                ("ep_http_notes", models.TextField(blank=True, null=True)),
                ("ep_http_redirect", models.BooleanField(blank=True, null=True)),
                (
                    "ep_http_redirect_eventually_to",
                    models.TextField(blank=True, null=True),
                ),
                (
                    "ep_http_redirect_eventually_to_external",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_http_redirect_eventually_to_http",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_http_redirect_eventually_to_https",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_http_redirect_eventually_to_subdomain",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_http_redirect_immediately_to",
                    models.TextField(blank=True, null=True),
                ),
                (
                    "ep_http_redirect_immediately_to_external",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_http_redirect_immediately_to_http",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_http_redirect_immediately_to_https",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_http_redirect_immediately_to_subdomain",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_http_redirect_immediately_to_www",
                    models.BooleanField(blank=True, null=True),
                ),
                ("ep_http_server_header", models.TextField(blank=True, null=True)),
                ("ep_http_server_version", models.TextField(blank=True, null=True)),
                ("ep_http_status", models.IntegerField(blank=True, null=True)),
                ("ep_http_unknown_error", models.BooleanField(blank=True, null=True)),
                ("ep_http_url", models.TextField(blank=True, null=True)),
                ("ep_https_headers", models.TextField(blank=True, null=True)),
                ("ep_https_hsts", models.BooleanField(blank=True, null=True)),
                (
                    "ep_https_hsts_all_subdomains",
                    models.BooleanField(blank=True, null=True),
                ),
                ("ep_https_hsts_header", models.TextField(blank=True, null=True)),
                (
                    "ep_https_hsts_max_age",
                    models.DecimalField(
                        blank=True, decimal_places=1000, max_digits=1000, null=True
                    ),
                ),
                ("ep_https_hsts_preload", models.BooleanField(blank=True, null=True)),
                (
                    "ep_https_https_bad_chain",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_https_https_bad_hostname",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_https_https_cert_chain_len",
                    models.IntegerField(blank=True, null=True),
                ),
                (
                    "ep_https_https_client_auth_required",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_https_https_custom_trusted",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_https_https_expired_cert",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_https_https_vull_connection",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_https_https_missing_intermediate_cert",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_https_https_public_trusted",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_https_https_self_signed_cert",
                    models.BooleanField(blank=True, null=True),
                ),
                ("ep_https_https_valid", models.BooleanField(blank=True, null=True)),
                ("ep_https_ip", models.GenericIPAddressField(blank=True, null=True)),
                ("ep_https_live", models.BooleanField(blank=True, null=True)),
                ("ep_https_notes", models.TextField(blank=True, null=True)),
                ("ep_https_redirect", models.BooleanField(blank=True, null=True)),
                (
                    "ep_https_redireect_eventually_to",
                    models.TextField(blank=True, null=True),
                ),
                (
                    "ep_https_redirect_eventually_to_external",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_https_redirect_eventually_to_http",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_https_redirect_eventually_to_https",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_https_redirect_eventually_to_subdomain",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_https_redirect_immediately_to",
                    models.TextField(blank=True, null=True),
                ),
                (
                    "ep_https_redirect_immediately_to_external",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_https_redirect_immediately_to_http",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_https_redirect_immediately_to_https",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_https_redirect_immediately_to_subdomain",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_https_redirect_immediately_to_www",
                    models.BooleanField(blank=True, null=True),
                ),
                ("ep_https_server_header", models.TextField(blank=True, null=True)),
                ("ep_https_server_version", models.TextField(blank=True, null=True)),
                ("ep_https_status", models.IntegerField(blank=True, null=True)),
                ("ep_https_unknown_error", models.BooleanField(blank=True, null=True)),
                ("ep_https_url", models.TextField(blank=True, null=True)),
                ("ep_httpswww_headers", models.TextField(blank=True, null=True)),
                ("ep_httpswww_hsts", models.BooleanField(blank=True, null=True)),
                (
                    "ep_httpswww_hsts_all_subdomains",
                    models.BooleanField(blank=True, null=True),
                ),
                ("ep_httpswww_hsts_header", models.TextField(blank=True, null=True)),
                (
                    "ep_httpswww_hsts_max_age",
                    models.DecimalField(
                        blank=True, decimal_places=1000, max_digits=1000, null=True
                    ),
                ),
                (
                    "ep_httpswww_hsts_preload",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_httpswww_https_bad_chain",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_httpswww_https_bad_hostname",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_httpswww_https_cert_chain_len",
                    models.IntegerField(blank=True, null=True),
                ),
                (
                    "ep_httpswww_https_client_auth_required",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_httpswww_https_custom_trusted",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_httpswww_https_expired_cert",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_httpswww_https_full_connection",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_httpswww_https_missing_intermediate_cert",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_httpswww_https_public_trusted",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_httpswww_https_self_signed_cert",
                    models.BooleanField(blank=True, null=True),
                ),
                ("ep_httpswww_https_valid", models.BooleanField(blank=True, null=True)),
                ("ep_httpswww_ip", models.GenericIPAddressField(blank=True, null=True)),
                ("ep_httpswww_live", models.BooleanField(blank=True, null=True)),
                ("ep_httpswww_notes", models.TextField(blank=True, null=True)),
                ("ep_httpswww_redirect", models.BooleanField(blank=True, null=True)),
                (
                    "ep_httpswww_redirect_eventually_to",
                    models.TextField(blank=True, null=True),
                ),
                (
                    "ep_httpswww_redirect_eventually_to_external",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_httpswww_redirect_eventually_to_http",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_httpswww_redirect_eventually_to_https",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_httpswww_redirect_eventually_to_subdomain",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_httpswww_redirect_immediately_to",
                    models.TextField(blank=True, null=True),
                ),
                (
                    "ep_httpswww_redirect_immediately_to_external",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_httpswww_redirect_immediately_to_http",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_httpswww_redirect_immediately_to_https",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_httpswww_redirect_immediately_to_subdomain",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_httpswww_redirect_immediately_to_www",
                    models.BooleanField(blank=True, null=True),
                ),
                ("ep_httpswww_server_header", models.TextField(blank=True, null=True)),
                ("ep_httpswww_server_version", models.TextField(blank=True, null=True)),
                ("ep_httpswww_status", models.IntegerField(blank=True, null=True)),
                (
                    "ep_httpswww_unknown_error",
                    models.BooleanField(blank=True, null=True),
                ),
                ("ep_httpswww_url", models.TextField(blank=True, null=True)),
                ("ep_httpwww_headers", models.TextField(blank=True, null=True)),
                ("ep_httpwww_ip", models.GenericIPAddressField(blank=True, null=True)),
                ("ep_httpwww_live", models.BooleanField(blank=True, null=True)),
                ("ep_httpwww_notes", models.TextField(blank=True, null=True)),
                ("ep_httpwww_redirect", models.BooleanField(blank=True, null=True)),
                (
                    "ep_httpwww_redirect_eventually_to",
                    models.TextField(blank=True, null=True),
                ),
                (
                    "ep_httpwww_redirect_eventually_to_external",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_httpwww_redirect_eventually_to_http",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_httpwww_redirect_eventually_to_https",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_httpwww_redirect_eventually_to_subdomain",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_httpwww_redirect_immediately_to",
                    models.TextField(blank=True, null=True),
                ),
                (
                    "ep_httpwww_redirect_immediately_to_external",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_httpwww_redirect_immediately_to_http",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_httpwww_redirect_immediately_to_https",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_httpwww_redirect_immediately_to_subdomain",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "ep_httpwww_redirect_immediately_to_www",
                    models.BooleanField(blank=True, null=True),
                ),
                ("ep_httpwww_server_header", models.TextField(blank=True, null=True)),
                ("ep_httpwww_server_version", models.TextField(blank=True, null=True)),
                ("ep_httpwww_status", models.IntegerField(blank=True, null=True)),
                (
                    "ep_httpwww_unknown_error",
                    models.BooleanField(blank=True, null=True),
                ),
                ("ep_httpwww_url", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "pshtt_results",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="ReportSummaryStats",
            fields=[
                (
                    "report_uid",
                    models.UUIDField(
                        default=uuid.UUID("1acc87bb-e5ed-11ed-aaa5-37ca8d677a21"),
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("start_date", models.DateField()),
                ("end_date", models.DateField(blank=True, null=True)),
                ("ip_count", models.IntegerField(blank=True, null=True)),
                ("root_count", models.IntegerField(blank=True, null=True)),
                ("sub_count", models.IntegerField(blank=True, null=True)),
                ("ports_count", models.IntegerField(blank=True, null=True)),
                ("creds_count", models.IntegerField(blank=True, null=True)),
                ("breach_count", models.IntegerField(blank=True, null=True)),
                ("cred_password_count", models.IntegerField(blank=True, null=True)),
                ("domain_alert_count", models.IntegerField(blank=True, null=True)),
                ("suspected_domain_count", models.IntegerField(blank=True, null=True)),
                ("insecure_port_count", models.IntegerField(blank=True, null=True)),
                ("verified_vuln_count", models.IntegerField(blank=True, null=True)),
                ("suspected_vuln_count", models.IntegerField(blank=True, null=True)),
                (
                    "suspected_vuln_addrs_count",
                    models.IntegerField(blank=True, null=True),
                ),
                ("threat_actor_count", models.IntegerField(blank=True, null=True)),
                ("dark_web_alerts_count", models.IntegerField(blank=True, null=True)),
                ("dark_web_mentions_count", models.IntegerField(blank=True, null=True)),
                (
                    "dark_web_executive_alerts_count",
                    models.IntegerField(blank=True, null=True),
                ),
                (
                    "dark_web_asset_alerts_count",
                    models.IntegerField(blank=True, null=True),
                ),
                ("pe_number_score", models.TextField(blank=True, null=True)),
                ("pe_letter_grade", models.TextField(blank=True, null=True)),
                (
                    "pe_percent_score",
                    models.DecimalField(
                        blank=True, decimal_places=1000, max_digits=1000, null=True
                    ),
                ),
            ],
            options={
                "db_table": "report_summary_stats",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="RootDomains",
            fields=[
                (
                    "root_domain_uid",
                    models.UUIDField(
                        default=uuid.UUID("1acc87bc-e5ed-11ed-aaa5-37ca8d677a21"),
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("root_domain", models.TextField()),
                ("ip_address", models.TextField(blank=True, null=True)),
                ("enumerate_subs", models.BooleanField(blank=True, null=True)),
            ],
            options={
                "db_table": "root_domains",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="ShodanAssets",
            fields=[
                (
                    "shodan_asset_uid",
                    models.UUIDField(
                        default=uuid.UUID("1acc87be-e5ed-11ed-aaa5-37ca8d677a21"),
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("organization", models.TextField(blank=True, null=True)),
                ("ip", models.TextField(blank=True, null=True)),
                ("port", models.IntegerField(blank=True, null=True)),
                ("protocol", models.TextField(blank=True, null=True)),
                ("timestamp", models.DateTimeField(blank=True, null=True)),
                ("product", models.TextField(blank=True, null=True)),
                ("server", models.TextField(blank=True, null=True)),
                ("tags", models.TextField(blank=True, null=True)),
                ("domains", models.TextField(blank=True, null=True)),
                ("hostnames", models.TextField(blank=True, null=True)),
                ("isn", models.TextField(blank=True, null=True)),
                ("asn", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "shodan_assets",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="ShodanInsecureProtocolsUnverifiedVulns",
            fields=[
                (
                    "insecure_product_uid",
                    models.UUIDField(
                        default=uuid.UUID("1acc87bf-e5ed-11ed-aaa5-37ca8d677a21"),
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("organization", models.TextField(blank=True, null=True)),
                ("ip", models.TextField(blank=True, null=True)),
                ("port", models.IntegerField(blank=True, null=True)),
                ("protocol", models.TextField(blank=True, null=True)),
                ("type", models.TextField(blank=True, null=True)),
                ("name", models.TextField(blank=True, null=True)),
                ("potential_vulns", models.TextField(blank=True, null=True)),
                ("mitigation", models.TextField(blank=True, null=True)),
                ("timestamp", models.DateTimeField(blank=True, null=True)),
                ("product", models.TextField(blank=True, null=True)),
                ("server", models.TextField(blank=True, null=True)),
                ("tags", models.TextField(blank=True, null=True)),
                ("domains", models.TextField(blank=True, null=True)),
                ("hostnames", models.TextField(blank=True, null=True)),
                ("isn", models.TextField(blank=True, null=True)),
                ("asn", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "shodan_insecure_protocols_unverified_vulns",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="ShodanVulns",
            fields=[
                (
                    "shodan_vuln_uid",
                    models.UUIDField(
                        default=uuid.UUID("1acc87c0-e5ed-11ed-aaa5-37ca8d677a21"),
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("organization", models.TextField(blank=True, null=True)),
                ("ip", models.TextField(blank=True, null=True)),
                ("port", models.TextField(blank=True, null=True)),
                ("protocol", models.TextField(blank=True, null=True)),
                ("timestamp", models.DateTimeField(blank=True, null=True)),
                ("cve", models.TextField(blank=True, null=True)),
                ("severity", models.TextField(blank=True, null=True)),
                (
                    "cvss",
                    models.DecimalField(
                        blank=True, decimal_places=1000, max_digits=1000, null=True
                    ),
                ),
                ("summary", models.TextField(blank=True, null=True)),
                ("product", models.TextField(blank=True, null=True)),
                ("attack_vector", models.TextField(blank=True, null=True)),
                ("av_description", models.TextField(blank=True, null=True)),
                ("attack_complexity", models.TextField(blank=True, null=True)),
                ("ac_description", models.TextField(blank=True, null=True)),
                ("confidentiality_impact", models.TextField(blank=True, null=True)),
                ("ci_description", models.TextField(blank=True, null=True)),
                ("integrity_impact", models.TextField(blank=True, null=True)),
                ("ii_description", models.TextField(blank=True, null=True)),
                ("availability_impact", models.TextField(blank=True, null=True)),
                ("ai_description", models.TextField(blank=True, null=True)),
                ("tags", models.TextField(blank=True, null=True)),
                ("domains", models.TextField(blank=True, null=True)),
                ("hostnames", models.TextField(blank=True, null=True)),
                ("isn", models.TextField(blank=True, null=True)),
                ("asn", models.IntegerField(blank=True, null=True)),
                ("type", models.TextField(blank=True, null=True)),
                ("name", models.TextField(blank=True, null=True)),
                ("potential_vulns", models.TextField(blank=True, null=True)),
                ("mitigation", models.TextField(blank=True, null=True)),
                ("server", models.TextField(blank=True, null=True)),
                ("is_verified", models.BooleanField(blank=True, null=True)),
            ],
            options={
                "db_table": "shodan_vulns",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="SubDomains",
            fields=[
                (
                    "sub_domain_uid",
                    models.UUIDField(
                        default=uuid.UUID("1acc87c1-e5ed-11ed-aaa5-37ca8d677a21"),
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("sub_domain", models.TextField()),
                ("status", models.BooleanField(blank=True, null=True)),
            ],
            options={
                "db_table": "sub_domains",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="TopCves",
            fields=[
                (
                    "top_cves_uid",
                    models.UUIDField(
                        default=uuid.UUID("1acc87c2-e5ed-11ed-aaa5-37ca8d677a21"),
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("cve_id", models.TextField(blank=True, null=True)),
                ("dynamic_rating", models.TextField(blank=True, null=True)),
                ("nvd_base_score", models.TextField(blank=True, null=True)),
                ("date", models.DateField(blank=True, null=True)),
                ("summary", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "top_cves",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="TopicTotals",
            fields=[
                (
                    "cound_uuid",
                    models.UUIDField(
                        default=uuid.UUID("1acc87c3-e5ed-11ed-aaa5-37ca8d677a21"),
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("organizations_uid", models.UUIDField()),
                ("content_count", models.IntegerField()),
                ("count_date", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "topic_totals",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="UniqueSoftware",
            fields=[
                (
                    "field_id",
                    models.UUIDField(
                        db_column="_id",
                        default=uuid.UUID("1acc87c4-e5ed-11ed-aaa5-37ca8d677a21"),
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("software_name", models.TextField()),
            ],
            options={
                "db_table": "unique_software",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Users",
            fields=[
                ("id", models.UUIDField(primary_key=True, serialize=False)),
                (
                    "email",
                    models.CharField(blank=True, max_length=64, null=True, unique=True),
                ),
                (
                    "username",
                    models.CharField(blank=True, max_length=64, null=True, unique=True),
                ),
                ("admin", models.IntegerField(blank=True, null=True)),
                ("role", models.IntegerField(blank=True, null=True)),
                (
                    "password_hash",
                    models.CharField(blank=True, max_length=128, null=True),
                ),
                (
                    "api_key",
                    models.CharField(
                        blank=True, max_length=128, null=True, unique=True
                    ),
                ),
            ],
            options={
                "db_table": "Users",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="VwBreachcomp",
            fields=[
                (
                    "credential_exposures_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("email", models.TextField(blank=True, null=True)),
                ("breach_name", models.TextField(blank=True, null=True)),
                ("organizations_uid", models.UUIDField(blank=True, null=True)),
                ("root_domain", models.TextField(blank=True, null=True)),
                ("sub_domain", models.TextField(blank=True, null=True)),
                ("hash_type", models.TextField(blank=True, null=True)),
                ("name", models.TextField(blank=True, null=True)),
                ("login_id", models.TextField(blank=True, null=True)),
                ("password", models.TextField(blank=True, null=True)),
                ("phone", models.TextField(blank=True, null=True)),
                ("data_source_uid", models.UUIDField(blank=True, null=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("breach_date", models.DateField(blank=True, null=True)),
                ("added_date", models.DateTimeField(blank=True, null=True)),
                ("modified_date", models.DateTimeField(blank=True, null=True)),
                ("data_classes", models.TextField(blank=True, null=True)),
                ("password_included", models.BooleanField(blank=True, null=True)),
                ("is_verified", models.BooleanField(blank=True, null=True)),
                ("is_fabricated", models.BooleanField(blank=True, null=True)),
                ("is_sensitive", models.BooleanField(blank=True, null=True)),
                ("is_retired", models.BooleanField(blank=True, null=True)),
                ("is_spam_list", models.BooleanField(blank=True, null=True)),
            ],
            options={
                "db_table": "vw_breachcomp",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="VwBreachcompBreachdetails",
            fields=[
                (
                    "organizations_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("breach_name", models.TextField(blank=True, null=True)),
                ("mod_date", models.DateField(blank=True, null=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("breach_date", models.DateField(blank=True, null=True)),
                ("password_included", models.BooleanField(blank=True, null=True)),
                ("number_of_creds", models.BigIntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "vw_breachcomp_breachdetails",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="VwBreachcompCredsbydate",
            fields=[
                (
                    "organizations_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("mod_date", models.DateField(blank=True, null=True)),
                ("no_password", models.BigIntegerField(blank=True, null=True)),
                ("password_included", models.BigIntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "vw_breachcomp_credsbydate",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="VwCidrs",
            fields=[
                ("cidr_uid", models.UUIDField(primary_key=True, serialize=False)),
                ("network", models.TextField(blank=True, null=True)),
                ("organizations_uid", models.UUIDField(blank=True, null=True)),
                ("data_source_uid", models.UUIDField(blank=True, null=True)),
                ("insert_alert", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "vw_cidrs",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="VwDarkwebAssetalerts",
            fields=[
                (
                    "organizations_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("date", models.DateField(blank=True, null=True)),
                ("site", models.TextField(blank=True, db_column="Site", null=True)),
                ("title", models.TextField(blank=True, db_column="Title", null=True)),
                (
                    "events",
                    models.BigIntegerField(blank=True, db_column="Events", null=True),
                ),
            ],
            options={
                "db_table": "vw_darkweb_assetalerts",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="VwDarkwebExecalerts",
            fields=[
                (
                    "organizations_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("date", models.DateField(blank=True, null=True)),
                ("site", models.TextField(blank=True, db_column="Site", null=True)),
                ("title", models.TextField(blank=True, db_column="Title", null=True)),
                (
                    "events",
                    models.BigIntegerField(blank=True, db_column="Events", null=True),
                ),
            ],
            options={
                "db_table": "vw_darkweb_execalerts",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="VwDarkwebInviteonlymarkets",
            fields=[
                (
                    "organizations_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("date", models.DateField(blank=True, null=True)),
                ("site", models.TextField(blank=True, db_column="Site", null=True)),
            ],
            options={
                "db_table": "vw_darkweb_inviteonlymarkets",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="VwDarkwebMentionsbydate",
            fields=[
                (
                    "organizations_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("date", models.DateField(blank=True, null=True)),
                (
                    "count",
                    models.BigIntegerField(blank=True, db_column="Count", null=True),
                ),
            ],
            options={
                "db_table": "vw_darkweb_mentionsbydate",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="VwDarkwebMostactposts",
            fields=[
                (
                    "organizations_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("date", models.DateField(blank=True, null=True)),
                ("title", models.TextField(blank=True, db_column="Title", null=True)),
                (
                    "comments_count",
                    models.IntegerField(
                        blank=True, db_column="Comments Count", null=True
                    ),
                ),
            ],
            options={
                "db_table": "vw_darkweb_mostactposts",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="VwDarkwebPotentialthreats",
            fields=[
                (
                    "organizations_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("date", models.DateField(blank=True, null=True)),
                ("site", models.TextField(blank=True, db_column="Site", null=True)),
                (
                    "threats",
                    models.TextField(blank=True, db_column="Threats", null=True),
                ),
            ],
            options={
                "db_table": "vw_darkweb_potentialthreats",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="VwDarkwebSites",
            fields=[
                (
                    "organizations_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("date", models.DateField(blank=True, null=True)),
                ("site", models.TextField(blank=True, db_column="Site", null=True)),
            ],
            options={
                "db_table": "vw_darkweb_sites",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="VwDarkwebSocmediaMostactposts",
            fields=[
                (
                    "organizations_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("date", models.DateField(blank=True, null=True)),
                ("title", models.TextField(blank=True, db_column="Title", null=True)),
                (
                    "comments_count",
                    models.IntegerField(
                        blank=True, db_column="Comments Count", null=True
                    ),
                ),
            ],
            options={
                "db_table": "vw_darkweb_socmedia_mostactposts",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="VwDarkwebThreatactors",
            fields=[
                (
                    "organizations_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("date", models.DateField(blank=True, null=True)),
                (
                    "creator",
                    models.TextField(blank=True, db_column="Creator", null=True),
                ),
                (
                    "grade",
                    models.DecimalField(
                        blank=True,
                        db_column="Grade",
                        decimal_places=1000,
                        max_digits=1000,
                        null=True,
                    ),
                ),
            ],
            options={
                "db_table": "vw_darkweb_threatactors",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="VwDarkwebTopcves",
            fields=[
                ("top_cves_uid", models.UUIDField(primary_key=True, serialize=False)),
                ("cve_id", models.TextField(blank=True, null=True)),
                ("dynamic_rating", models.TextField(blank=True, null=True)),
                ("nvd_base_score", models.TextField(blank=True, null=True)),
                ("date", models.DateField(blank=True, null=True)),
                ("summary", models.TextField(blank=True, null=True)),
                ("data_source_uid", models.UUIDField(blank=True, null=True)),
            ],
            options={
                "db_table": "vw_darkweb_topcves",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="VwOrgsAttacksurface",
            fields=[
                (
                    "organizations_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("cyhy_db_name", models.TextField(blank=True, null=True)),
                ("num_ports", models.BigIntegerField(blank=True, null=True)),
                ("num_root_domain", models.BigIntegerField(blank=True, null=True)),
                ("num_sub_domain", models.BigIntegerField(blank=True, null=True)),
                ("num_ips", models.BigIntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "vw_orgs_attacksurface",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="VwOrgsContactInfo",
            fields=[
                (
                    "organizations_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("cyhy_db_name", models.TextField(blank=True, null=True)),
                ("agency_name", models.TextField(blank=True, null=True)),
                ("contact_type", models.TextField(blank=True, null=True)),
                ("contact_name", models.TextField(blank=True, null=True)),
                ("email", models.TextField(blank=True, null=True)),
                ("phone", models.TextField(blank=True, null=True)),
                ("date_pulled", models.DateField(blank=True, null=True)),
            ],
            options={
                "db_table": "vw_orgs_contact_info",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="VwOrgsTotalDomains",
            fields=[
                (
                    "organizations_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("cyhy_db_name", models.TextField(blank=True, null=True)),
                ("num_root_domain", models.BigIntegerField(blank=True, null=True)),
                ("num_sub_domain", models.BigIntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "vw_orgs_total_domains",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="VwOrgsTotalIps",
            fields=[
                (
                    "organizations_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("cyhy_db_name", models.TextField(blank=True, null=True)),
                ("num_ips", models.BigIntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "vw_orgs_total_ips",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="VwOrgsTotalPorts",
            fields=[
                (
                    "organizations_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("cyhy_db_name", models.TextField(blank=True, null=True)),
                ("num_ports", models.BigIntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "vw_orgs_total_ports",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="VwShodanvulnsSuspected",
            fields=[
                (
                    "organizations_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("organization", models.TextField(blank=True, null=True)),
                ("ip", models.TextField(blank=True, null=True)),
                ("port", models.TextField(blank=True, null=True)),
                ("protocol", models.TextField(blank=True, null=True)),
                ("type", models.TextField(blank=True, null=True)),
                ("name", models.TextField(blank=True, null=True)),
                ("potential_vulns", models.TextField(blank=True, null=True)),
                ("mitigation", models.TextField(blank=True, null=True)),
                ("timestamp", models.DateTimeField(blank=True, null=True)),
                ("product", models.TextField(blank=True, null=True)),
                ("server", models.TextField(blank=True, null=True)),
                ("tags", models.TextField(blank=True, null=True)),
                ("domains", models.TextField(blank=True, null=True)),
                ("hostnames", models.TextField(blank=True, null=True)),
                ("isn", models.TextField(blank=True, null=True)),
                ("asn", models.IntegerField(blank=True, null=True)),
                ("data_source", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "vw_shodanvulns_suspected",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="VwShodanvulnsVerified",
            fields=[
                (
                    "organizations_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("organization", models.TextField(blank=True, null=True)),
                ("ip", models.TextField(blank=True, null=True)),
                ("port", models.TextField(blank=True, null=True)),
                ("protocol", models.TextField(blank=True, null=True)),
                ("timestamp", models.DateTimeField(blank=True, null=True)),
                ("cve", models.TextField(blank=True, null=True)),
                ("severity", models.TextField(blank=True, null=True)),
                (
                    "cvss",
                    models.DecimalField(
                        blank=True, decimal_places=1000, max_digits=1000, null=True
                    ),
                ),
                ("summary", models.TextField(blank=True, null=True)),
                ("product", models.TextField(blank=True, null=True)),
                ("attack_vector", models.TextField(blank=True, null=True)),
                ("av_description", models.TextField(blank=True, null=True)),
                ("attack_complexity", models.TextField(blank=True, null=True)),
                ("ac_description", models.TextField(blank=True, null=True)),
                ("confidentiality_impact", models.TextField(blank=True, null=True)),
                ("ci_description", models.TextField(blank=True, null=True)),
                ("integrity_impact", models.TextField(blank=True, null=True)),
                ("ii_description", models.TextField(blank=True, null=True)),
                ("availability_impact", models.TextField(blank=True, null=True)),
                ("ai_description", models.TextField(blank=True, null=True)),
                ("tags", models.TextField(blank=True, null=True)),
                ("domains", models.TextField(blank=True, null=True)),
                ("hostnames", models.TextField(blank=True, null=True)),
                ("isn", models.TextField(blank=True, null=True)),
                ("asn", models.IntegerField(blank=True, null=True)),
                ("data_source", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "vw_shodanvulns_verified",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="WasTrackerCustomerdata",
            fields=[
                (
                    "customer_id",
                    models.UUIDField(
                        db_column="customer_id",
                        default=uuid.uuid1,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("tag", models.TextField()),
                ("customer_name", models.TextField()),
                ("testing_sector", models.TextField()),
                ("ci_type", models.TextField()),
                ("jira_ticket", models.TextField()),
                ("ticket", models.TextField()),
                ("next_scheduled", models.TextField()),
                ("last_scanned", models.TextField()),
                ("frequency", models.TextField()),
                ("comments_notes", models.TextField()),
                ("was_report_poc", models.TextField()),
                ("was_report_email", models.TextField()),
                ("onboarding_date", models.TextField()),
                ("no_of_web_apps", models.IntegerField()),
                ("no_web_apps_last_updated", models.TextField(blank=True, null=True)),
                ("elections", models.TextField(blank=True, null=True)),
                ("fceb", models.TextField()),
                ("special_report", models.TextField()),
                ("report_password", models.TextField()),
                ("child_tags", models.TextField()),
            ],
            options={
                "db_table": "was_tracker_customerdata",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="WebAssets",
            fields=[
                (
                    "asset_uid",
                    models.UUIDField(
                        default=uuid.UUID("1acc87c5-e5ed-11ed-aaa5-37ca8d677a21"),
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("asset_type", models.TextField()),
                ("asset", models.TextField()),
                ("ip_type", models.TextField(blank=True, null=True)),
                ("verified", models.BooleanField(blank=True, null=True)),
                ("asset_origin", models.TextField(blank=True, null=True)),
                ("report_on", models.BooleanField(blank=True, null=True)),
                ("last_scanned", models.DateTimeField(blank=True, null=True)),
                ("report_status_reason", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "web_assets",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="TeamMembers",
            fields=[
                (
                    "team_member_uid",
                    models.UUIDField(
                        default=uuid.UUID("1acc87bd-e5ed-11ed-aaa5-37ca8d677a21"),
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("team_member_fname", models.TextField()),
                ("team_member_lname", models.TextField()),
                ("team_member_email", models.TextField()),
                ("team_member_ghID", models.TextField()),
                ("team_member_phone", models.TextField(blank=True, null=True)),
                ("team_member_role", models.TextField(blank=True, null=True)),
                ("team_member_notes", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "team_members",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="WeeklyStatuses",
            fields=[
                (
                    "weekly_status_uid",
                    models.UUIDField(
                        default=uuid.UUID("1acc87c6-e5ed-11ed-aaa5-37ca8d677a21"),
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("user_status", models.TextField(blank=True)),
                ("key_accomplishments", models.TextField(blank=True, null=True)),
                ("ongoing_task", models.TextField()),
                ("upcoming_task", models.TextField()),
                ("obstacles", models.TextField(blank=True, null=True)),
                ("non_standard_meeting", models.TextField(blank=True, null=True)),
                ("deliverables", models.TextField(blank=True, null=True)),
                ("pto", models.TextField(blank=True, null=True)),
                ("week_ending", models.DateField()),
                ("notes", models.TextField(blank=True, null=True)),
                ("statusComplete", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "weekly_statuses",
                "managed": True,
            },
        ),
    ]
