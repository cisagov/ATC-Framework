"""home module migrations/0008.py."""
# Generated by Django 4.1.3 on 2023-11-14 18:12

# Standard Python Libraries
import uuid

# Third-Party Libraries
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    """Migration class."""

    dependencies = [
        ("home", "0007_alter_teammembers_team_member_uid_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="CpeVender",
            fields=[
                (
                    "cpe_vender_uid",
                    models.UUIDField(
                        default=uuid.uuid1, primary_key=True, serialize=False
                    ),
                ),
                ("vender_name", models.TextField(blank=True, null=True, unique=True)),
            ],
            options={
                "db_table": "cpe_vender",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Cves",
            fields=[
                (
                    "cve_uid",
                    models.UUIDField(
                        default=uuid.uuid1, primary_key=True, serialize=False
                    ),
                ),
                ("cve_name", models.TextField(blank=True, null=True, unique=True)),
                ("published_date", models.DateTimeField(blank=True, null=True)),
                ("last_modified_date", models.DateTimeField(blank=True, null=True)),
                ("vuln_status", models.TextField(blank=True, null=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("cvss_v2_source", models.TextField(blank=True, null=True)),
                ("cvss_v2_type", models.TextField(blank=True, null=True)),
                ("cvss_v2_version", models.TextField(blank=True, null=True)),
                ("cvss_v2_vector_string", models.TextField(blank=True, null=True)),
                ("cvss_v2_base_score", models.FloatField(blank=True, null=True)),
                ("cvss_v2_base_severity", models.TextField(blank=True, null=True)),
                (
                    "cvss_v2_exploitability_score",
                    models.FloatField(blank=True, null=True),
                ),
                ("cvss_v2_impact_score", models.FloatField(blank=True, null=True)),
                ("cvss_v3_source", models.TextField(blank=True, null=True)),
                ("cvss_v3_type", models.TextField(blank=True, null=True)),
                ("cvss_v3_version", models.TextField(blank=True, null=True)),
                ("cvss_v3_vector_string", models.TextField(blank=True, null=True)),
                ("cvss_v3_base_score", models.FloatField(blank=True, null=True)),
                ("cvss_v3_base_severity", models.TextField(blank=True, null=True)),
                (
                    "cvss_v3_exploitability_score",
                    models.FloatField(blank=True, null=True),
                ),
                ("cvss_v3_impact_score", models.FloatField(blank=True, null=True)),
                ("cvss_v4_source", models.TextField(blank=True, null=True)),
                ("cvss_v4_type", models.TextField(blank=True, null=True)),
                ("cvss_v4_version", models.TextField(blank=True, null=True)),
                ("cvss_v4_vector_string", models.TextField(blank=True, null=True)),
                ("cvss_v4_base_score", models.FloatField(blank=True, null=True)),
                ("cvss_v4_base_severity", models.TextField(blank=True, null=True)),
                (
                    "cvss_v4_exploitability_score",
                    models.FloatField(blank=True, null=True),
                ),
                ("cvss_v4_impact_score", models.FloatField(blank=True, null=True)),
                (
                    "weaknesses",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(blank=True, null=True),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "reference_urls",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(blank=True, null=True),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "cpe_list",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(blank=True, null=True),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
            ],
            options={
                "db_table": "cves",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="CyhyKevs",
            fields=[
                ("cyhy_kevs_uid", models.UUIDField(primary_key=True, serialize=False)),
                ("kev", models.CharField(blank=True, max_length=255, null=True)),
                ("first_seen", models.DateField(blank=True, null=True)),
                ("last_seen", models.DateField(blank=True, null=True)),
            ],
            options={
                "db_table": "cyhy_kevs",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="VwDscorePEDomain",
            fields=[
                (
                    "organizations_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("parent_org_uid", models.UUIDField(blank=True, null=True)),
                ("num_ident_domain", models.BigIntegerField(blank=True, null=True)),
                ("num_monitor_domain", models.BigIntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "vw_dscore_pe_domain",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="VwDscorePEIp",
            fields=[
                (
                    "organizations_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("parent_org_uid", models.UUIDField(blank=True, null=True)),
                ("num_ident_ip", models.BigIntegerField(blank=True, null=True)),
                ("num_monitor_ip", models.BigIntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "vw_dscore_pe_ip",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="VwDscoreVSCert",
            fields=[
                (
                    "organizations_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("parent_org_uid", models.UUIDField(blank=True, null=True)),
                ("num_ident_cert", models.BigIntegerField(blank=True, null=True)),
                ("num_monitor_cert", models.BigIntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "vw_dscore_vs_cert",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="VwDscoreVSMail",
            fields=[
                (
                    "organizations_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("parent_org_uid", models.UUIDField(blank=True, null=True)),
                ("num_valid_dmarc", models.BigIntegerField(blank=True, null=True)),
                ("num_valid_spf", models.BigIntegerField(blank=True, null=True)),
                (
                    "num_valid_dmarc_or_spf",
                    models.BigIntegerField(blank=True, null=True),
                ),
                ("total_mail_domains", models.BigIntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "vw_dscore_vs_mail",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="VwDscoreWASWebapp",
            fields=[
                (
                    "organizations_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("parent_org_uid", models.UUIDField(blank=True, null=True)),
                ("num_ident_webapp", models.BigIntegerField(blank=True, null=True)),
                ("num_monitor_webapp", models.BigIntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "vw_dscore_was_webapp",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="VwIpsCidrOrgInfo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ip_hash", models.CharField(blank=True, max_length=255, null=True)),
                ("ip", models.CharField(blank=True, max_length=255, null=True)),
                ("origin_cidr", models.UUIDField(blank=True, null=True)),
                ("network", models.CharField(blank=True, max_length=255, null=True)),
                ("organizations_uid", models.UUIDField(blank=True, null=True)),
            ],
            options={
                "db_table": "vw_ips_cidr_org_info",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="VwIpsSubRootOrgInfo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ip_hash", models.CharField(blank=True, max_length=255, null=True)),
                ("ip", models.CharField(blank=True, max_length=255, null=True)),
                ("origin_cidr", models.UUIDField(blank=True, null=True)),
                ("organizations_uid", models.UUIDField(blank=True, null=True)),
                ("i_current", models.BooleanField(blank=True, null=True)),
                ("sd_current", models.BooleanField(blank=True, null=True)),
            ],
            options={
                "db_table": "vw_ips_sub_root_org_info",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="VwIscoreOrgsIpCounts",
            fields=[
                (
                    "organizations_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                (
                    "cyhy_db_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("ip_count", models.BigIntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "vw_iscore_orgs_ip_counts",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="VwIscorePEBreach",
            fields=[
                (
                    "organizations_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("parent_org_uid", models.UUIDField(blank=True, null=True)),
                ("date", models.DateField(blank=True, null=True)),
                ("breach_count", models.BigIntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "vw_iscore_pe_breach",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="VwIscorePECred",
            fields=[
                (
                    "organizations_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("parent_org_uid", models.UUIDField(blank=True, null=True)),
                ("date", models.DateField(blank=True, null=True)),
                ("password_creds", models.BigIntegerField(blank=True, null=True)),
                ("total_creds", models.BigIntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "vw_iscore_pe_cred",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="VwIscorePEDarkweb",
            fields=[
                (
                    "organizations_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("parent_org_uid", models.UUIDField(blank=True, null=True)),
                ("alert_type", models.CharField(blank=True, max_length=255, null=True)),
                ("date", models.DateField(blank=True, null=True)),
                ("Count", models.BigIntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "vw_iscore_pe_darkweb",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="VwIscorePEProtocol",
            fields=[
                (
                    "organizations_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("parent_org_uid", models.UUIDField(blank=True, null=True)),
                ("port", models.CharField(blank=True, max_length=255, null=True)),
                ("ip", models.CharField(blank=True, max_length=255, null=True)),
                ("protocol", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "protocol_type",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("date", models.DateField(blank=True, null=True)),
            ],
            options={
                "db_table": "vw_iscore_pe_protocol",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="VwIscorePEVuln",
            fields=[
                (
                    "organizations_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("parent_org_uid", models.UUIDField(blank=True, null=True)),
                ("date", models.DateField(blank=True, null=True)),
                ("cve_name", models.CharField(blank=True, max_length=255, null=True)),
                ("cvss_score", models.FloatField(blank=True, null=True)),
            ],
            options={
                "db_table": "vw_iscore_pe_vuln",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="VwIscoreVSVuln",
            fields=[
                (
                    "organizations_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("parent_org_uid", models.UUIDField(blank=True, null=True)),
                ("cve_name", models.CharField(blank=True, max_length=255, null=True)),
                ("cvss_score", models.FloatField(blank=True, null=True)),
            ],
            options={
                "db_table": "vw_iscore_vs_vuln",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="VwIscoreVSVulnPrev",
            fields=[
                (
                    "organizations_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("parent_org_uid", models.UUIDField(blank=True, null=True)),
                ("cve_name", models.CharField(blank=True, max_length=255, null=True)),
                ("cvss_score", models.FloatField(blank=True, null=True)),
                ("time_closed", models.DateField(blank=True, null=True)),
            ],
            options={
                "db_table": "vw_iscore_vs_vuln_prev",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="VwIscoreWASVuln",
            fields=[
                (
                    "organizations_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("parent_org_uid", models.UUIDField(blank=True, null=True)),
                ("date", models.DateField(blank=True, null=True)),
                ("cve_name", models.CharField(blank=True, max_length=255, null=True)),
                ("cvss_score", models.FloatField(blank=True, null=True)),
                (
                    "owasp_category",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
            options={
                "db_table": "vw_iscore_was_vuln",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="VwIscoreWASVulnPrev",
            fields=[
                (
                    "organizations_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("parent_org_uid", models.UUIDField(blank=True, null=True)),
                ("was_total_vulns_prev", models.BigIntegerField(blank=True, null=True)),
                ("date", models.DateField(blank=True, null=True)),
            ],
            options={
                "db_table": "vw_iscore_was_vuln_prev",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="VwPEScoreCheckNewCVE",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("cve_name", models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                "db_table": "vw_pescore_check_new_cve",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="VwPshttDomainsToRun",
            fields=[
                ("sub_domain_uid", models.UUIDField(primary_key=True, serialize=False)),
                ("sub_domain", models.TextField(blank=True, null=True)),
                ("organizations_uid", models.UUIDField()),
                ("name", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "vw_pshtt_domains_to_run",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="XpanseBusinessUnits",
            fields=[
                (
                    "xpanse_business_unit_uid",
                    models.UUIDField(
                        default=uuid.uuid1, primary_key=True, serialize=False
                    ),
                ),
                ("entity_name", models.TextField(blank=True, null=True, unique=True)),
                ("state", models.TextField(blank=True, null=True)),
                ("county", models.TextField(blank=True, null=True)),
                ("city", models.TextField(blank=True, null=True)),
                ("sector", models.TextField(blank=True, null=True)),
                ("entity_type", models.TextField(blank=True, null=True)),
                ("region", models.TextField(blank=True, null=True)),
                ("rating", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "xpanse_business_units",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="XpanseAssets",
            fields=[
                (
                    "xpanse_asset_uid",
                    models.UUIDField(
                        default=uuid.uuid1, primary_key=True, serialize=False
                    ),
                ),
                ("asm_id", models.TextField(unique=True)),
                ("asset_name", models.TextField(blank=True, null=True)),
                ("asset_type", models.TextField(blank=True, null=True)),
                ("last_observed", models.DateTimeField(blank=True, null=True)),
                ("first_observed", models.DateTimeField(blank=True, null=True)),
                (
                    "externally_detected_providers",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(blank=True),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                ("created", models.DateTimeField(blank=True, null=True)),
                (
                    "ips",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(blank=True),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "active_external_services_types",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(blank=True),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                ("domain", models.TextField(blank=True, null=True)),
                ("certificate_issuer", models.TextField(blank=True, null=True)),
                ("certificate_algorithm", models.TextField(blank=True, null=True)),
                (
                    "certificate_classifications",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(blank=True),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                ("resolves", models.BooleanField(blank=True, null=True)),
                (
                    "top_level_asset_mapper_domain",
                    models.TextField(blank=True, null=True),
                ),
                ("domain_asset_type", models.JSONField(blank=True, null=True)),
                ("is_paid_level_domain", models.BooleanField(blank=True, null=True)),
                ("domain_details", models.JSONField(blank=True, null=True)),
                ("dns_zone", models.TextField(blank=True, null=True)),
                ("latest_sampled_ip", models.IntegerField(blank=True, null=True)),
                ("recent_ips", models.JSONField(blank=True, null=True)),
                ("external_services", models.JSONField(blank=True, null=True)),
                (
                    "externally_inferred_vulnerability_score",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "externally_inferred_cves",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(blank=True),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "explainers",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(blank=True),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "tags",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(blank=True),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
            ],
            options={
                "db_table": "xpanse_assets",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="XpanseCves",
            fields=[
                (
                    "xpanse_cve_uid",
                    models.UUIDField(
                        default=uuid.uuid1,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("cve_id", models.TextField(blank=True, null=True, unique=True)),
                (
                    "cvss_score_v2",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                ("cve_severity_v2", models.TextField(blank=True, null=True)),
                (
                    "cvss_score_v3",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                ("cve_severity_v3", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "xpanse_cves",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="XpanseCveService",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("inferred_cve_match_type", models.TextField(blank=True, null=True)),
                ("product", models.TextField(blank=True, null=True)),
                ("confidence", models.TextField(blank=True, null=True)),
                ("vendor", models.TextField(blank=True, null=True)),
                ("version_number", models.TextField(blank=True, null=True)),
                ("activity_status", models.TextField(blank=True, null=True)),
                ("first_observed", models.DateTimeField(blank=True, null=True)),
                ("last_observed", models.DateTimeField(blank=True, null=True)),
                (
                    "xpanse_inferred_cve",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="home.xpansecves",
                    ),
                ),
            ],
            options={
                "db_table": "xpanse_cve_services",
                "managed": True,
            },
        ),
        migrations.AlterField(
            model_name="teammembers",
            name="team_member_uid",
            field=models.UUIDField(
                default=uuid.uuid1, primary_key=True, serialize=False
            ),
        ),
        migrations.AlterField(
            model_name="weeklystatuses",
            name="weekly_status_uid",
            field=models.UUIDField(
                default=uuid.uuid1, primary_key=True, serialize=False
            ),
        ),
        migrations.CreateModel(
            name="XpanseServices",
            fields=[
                (
                    "xpanse_service_uid",
                    models.UUIDField(
                        default=uuid.uuid1, primary_key=True, serialize=False
                    ),
                ),
                ("service_id", models.TextField(blank=True, null=True, unique=True)),
                ("service_name", models.TextField(blank=True, null=True)),
                ("service_type", models.TextField(blank=True, null=True)),
                (
                    "ip_address",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(blank=True),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "domain",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(blank=True),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "externally_detected_providers",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(blank=True),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                ("is_active", models.TextField(blank=True, null=True)),
                ("first_observed", models.DateTimeField(blank=True, null=True)),
                ("last_observed", models.DateTimeField(blank=True, null=True)),
                ("port", models.IntegerField(blank=True, null=True)),
                ("protocol", models.TextField(blank=True, null=True)),
                (
                    "active_classifications",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(blank=True),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "inactive_classifications",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(blank=True),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                ("discovery_type", models.TextField(blank=True, null=True)),
                (
                    "externally_inferred_vulnerability_score",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "externally_inferred_cves",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(blank=True),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                ("service_key", models.TextField(blank=True, null=True)),
                ("service_key_type", models.TextField(blank=True, null=True)),
                (
                    "cves",
                    models.ManyToManyField(
                        through="home.XpanseCveService", to="home.xpansecves"
                    ),
                ),
            ],
            options={
                "db_table": "xpanse_services",
                "managed": True,
            },
        ),
        migrations.AddField(
            model_name="xpansecveservice",
            name="xpanse_service",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="home.xpanseservices"
            ),
        ),
        migrations.CreateModel(
            name="XpanseAlerts",
            fields=[
                (
                    "xpanse_alert_uid",
                    models.UUIDField(
                        default=uuid.uuid1, primary_key=True, serialize=False
                    ),
                ),
                (
                    "time_pulled_from_xpanse",
                    models.DateTimeField(blank=True, null=True),
                ),
                ("alert_id", models.TextField(unique=True)),
                ("detection_timestamp", models.DateTimeField(blank=True, null=True)),
                ("alert_name", models.TextField(blank=True, null=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("host_name", models.TextField(blank=True, null=True)),
                ("alert_action", models.TextField(blank=True, null=True)),
                ("action_pretty", models.TextField(blank=True, null=True)),
                (
                    "action_country",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(blank=True),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "action_remote_port",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.IntegerField(blank=True),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                ("starred", models.BooleanField(blank=True, null=True)),
                ("external_id", models.TextField(blank=True, null=True)),
                ("related_external_id", models.TextField(blank=True, null=True)),
                ("alert_occurrence", models.IntegerField(blank=True, null=True)),
                ("severity", models.TextField(blank=True, null=True)),
                ("matching_status", models.TextField(blank=True, null=True)),
                ("local_insert_ts", models.DateTimeField(blank=True, null=True)),
                ("last_modified_ts", models.DateTimeField(blank=True, null=True)),
                ("case_id", models.IntegerField(blank=True, null=True)),
                (
                    "event_timestamp",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.DateTimeField(blank=True),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                ("alert_type", models.TextField(blank=True, null=True)),
                ("resolution_status", models.TextField(blank=True, null=True)),
                ("resolution_comment", models.TextField(blank=True, null=True)),
                (
                    "tags",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(blank=True),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                ("last_observed", models.DateTimeField(blank=True, null=True)),
                (
                    "country_codes",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(blank=True),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "cloud_providers",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(blank=True),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "ipv4_addresses",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(blank=True),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "domain_names",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(blank=True),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "service_ids",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(blank=True),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "website_ids",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(blank=True),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "asset_ids",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(blank=True),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                ("certificate", models.JSONField(blank=True, null=True)),
                ("port_protocol", models.TextField(blank=True, null=True)),
                ("attack_surface_rule_name", models.TextField(blank=True, null=True)),
                ("remediation_guidance", models.TextField(blank=True, null=True)),
                ("asset_identifiers", models.JSONField(blank=True, null=True)),
                (
                    "assets",
                    models.ManyToManyField(
                        related_name="alerts", to="home.xpanseassets"
                    ),
                ),
                (
                    "business_units",
                    models.ManyToManyField(
                        related_name="alerts", to="home.xpansebusinessunits"
                    ),
                ),
                (
                    "services",
                    models.ManyToManyField(
                        related_name="alerts", to="home.xpanseservices"
                    ),
                ),
            ],
            options={
                "db_table": "xpanse_alerts",
                "managed": True,
            },
        ),
        migrations.AlterUniqueTogether(
            name="xpansecveservice",
            unique_together={("xpanse_inferred_cve", "xpanse_service")},
        ),
        migrations.CreateModel(
            name="CpeProduct",
            fields=[
                (
                    "cpe_product_uid",
                    models.UUIDField(
                        default=uuid.uuid1, primary_key=True, serialize=False
                    ),
                ),
                ("cpe_product_name", models.TextField(blank=True, null=True)),
                ("version_number", models.TextField(blank=True, null=True)),
                (
                    "cpe_vender_uid",
                    models.ForeignKey(
                        db_column="cpe_vender_uid",
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="home.cpevender",
                    ),
                ),
                (
                    "cves",
                    models.ManyToManyField(related_name="products", to="home.cves"),
                ),
            ],
            options={
                "db_table": "cpe_product",
                "managed": True,
                "unique_together": {("cpe_product_name", "version_number")},
            },
        ),
    ]
